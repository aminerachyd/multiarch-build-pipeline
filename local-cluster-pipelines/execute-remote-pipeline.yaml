apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: execute-remote-pipeline
spec:
  params:
    - name: git-url
      type: string
      description: Git url of the repo to execute the pipeline on
    - name: git-revision
      type: string
      description: The git revision (branch, tag or sha) that should be built
    - name: image-server
      type: string
      description: Image registry to store the image in
    - name: image-namespace
      type: string
      description: Image namespace in the registry (user or organisation)
    - name: image-repository
      type: string
      description: Image repository in the registry
    - name: image-tag
      type: string
      description: Image tag
    - name: pipeline-name
      type: string
      description: Name of the pipeline to execute
    - name: pipeline-namespace
      type: string
      description: Which namespace is the pipeline located in?
    - name: openshift-server-url
      type: string
      description: URL of the remote OpenShift API server
    - name: openshift-token-secret
      type: string
      description: Name of the secret holding the authentication token
  steps:
  - name: execute-remote-pipeline-step
    command:
    - /bin/bash
    args:
    - -c
    - |
      set -e

      if [ -z "$OPENSHIFT_TOKEN" ]; then
        echo OPENSHIFT_TOKEN is empty
        exit 1
      fi

      oc login \
        --token "$OPENSHIFT_TOKEN" \
        --insecure-skip-tls-verify \
        "$(params.openshift-server-url)"

      PIPELINERUN=$(
        tkn pipeline start \
          --namespace $(params.pipeline-namespace) \
          --param git-url=$(params.git-url) \
          --param git-revision=$(params.git-revision) \
        	--param image-server=$(params.image-server) \
        	--param image-namespace=$(params.image-namespace) \
        	--param image-repository=$(params.image-repository) \
        	--param image-tag=$(params.image-tag) \
          $(params.pipeline-name) \
          | sed --quiet 's/Pipelinerun started: \(.*\)/\1/p'
      )

      tkn pipelinerun logs \
        --namespace $(params.pipeline-namespace) \
        --follow "$PIPELINERUN"

      STATUS=$(
        oc get pipelinerun \
          --namespace $(params.pipeline-namespace) \
          "$PIPELINERUN" \
          --output jsonpath='{.status.conditions[?(@.type=="Succeeded")].status}'
      )

      if [ "$STATUS" != True ]; then
        echo "Remote pipeline failed:"
        oc get pipelinerun \
          --namespace $(params.pipeline-namespace) \
          "$PIPELINERUN" \
          --output jsonpath='{.status.conditions[?(@.type=="Succeeded")].message}'
        exit 1
      fi
    image: quay.io/noseka1/execute-remote-pipeline:latest
    env:
    - name: OPENSHIFT_TOKEN
      valueFrom:
        secretKeyRef:
          name: $(params.openshift-token-secret)
          key: openshift-token

apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: PIPELINE_NAME
spec:
  params:
    - description: The url for the git repository
      name: git-url
      type: string
    - default: master
      description: 'The git revision (branch, tag, or sha) that should be built'
      name: git-revision
      type: string
    - name: image-server
      description: 'Image registry to store the image in'
      type: string
    - name: image-namespace
      description: 'Image namespace in the registry (user or organisation)'
      type: string
    - default: 'false'
      description: Enable the pipeline to scan the image for vulnerabilities
      name: scan-image
      type: string
    - default: 'false'
      description: Enable the pipeline to lint the Dockerfile for best practices
      name: lint-dockerfile
      type: string
    - default: grpc
      description: >-
        Protocol to check health after deployment, either https or grpc,
        defaults to https
      name: health-protocol
      type: string
    - default: /
      description: 'Endpoint to check health after deployment, defaults /'
      name: health-endpoint
      type: string
    - name: x86-server-url
      description: 'X86 cluster API server for multiarch build'
      type: string
   #- name: power-server-url
   #  description: 'Power cluster API server for multiarch build'
   #  type: string
   #- name: z-server-url
   #  description: 'Z cluster API server for multiarch build'
   #  type: string
  tasks:
  - name: setup
    params:
      - name: git-url
        value: $(params.git-url)
      - name: git-revision
        value: $(params.git-revision)
      - name: image-server
        value: $(params.image-server)
      - name: image-namespace
        value: $(params.image-namespace)
      - name: scan-image
        value: $(params.scan-image)
      - name: health-endpoint
        value: $(params.health-endpoint)
      - name: health-protocol
        value: $(params.health-protocol)
      - name: lint-dockerfile
        value: $(params.lint-dockerfile)
    taskRef:
      kind: Task
      name: ibm-setup-v2-7-8
  - name: code-lint
    params:
      - name: git-url
        value: $(tasks.setup.results.git-url)
      - name: git-revision
        value: $(tasks.setup.results.git-revision)
      - name: source-dir
        value: $(tasks.setup.results.source-dir)
      - name: app-name
        value: $(tasks.setup.results.app-name)
    runAfter:
      - setup
    taskRef:
      kind: Task
      name: ibm-sonar-test-v2-7-7
  - name: dockerfile-lint
    params:
      - name: git-url
        value: $(tasks.setup.results.git-url)
      - name: git-revision
        value: $(tasks.setup.results.git-revision)
      - name: source-dir
        value: $(tasks.setup.results.source-dir)
      - name: lint-dockerfile
        value: $(tasks.setup.results.dockerfile-lint)
    runAfter:
      - code-lint
    taskRef:
      kind: Task
      name: ibm-dockerfile-lint-v2-7-7
  - name: build-x86
    params:
      - name: git-url
        value: $(tasks.setup.results.git-url)
      - name: git-revision
        value: $(tasks.setup.results.git-revision)
      - name: image-server
        value: $(params.image-server)
      - name: image-namespace
        value: $(params.image-namespace)
      - name: image-repository
        value: $(tasks.setup.results.app-name)
      - name: image-tag
        value: $(tasks.setup.results.image-tag)
      - name: pipeline-name
        value: build-push
      - name: pipeline-namespace
        value: multiarch-demo
      - name: openshift-server-url
        value: $(params.x86-server-url)
      - name: openshift-token-secret
        value: builder-cluster-x86-secret
    runAfter:
      - dockerfile-lint
    taskRef:
      kind: Task
      name: execute-remote-pipeline
        # - name: build-power
        #   params:
        #     - name: pipeline-name
        #       value: build-push
        #     - name: pipeline-namespace
        #       value: multiarch-demo
        #     - name: openshift-server-url
        #       value: $(params.power-server-url)
        #     - name: openshift-token-secret
        #       value: builder-cluster-power-secret
        #   runAfter:
        #     - dockerfile-lint
        #   taskRef:
        #     kind: Task
        #     name: execute-remote-pipeline
        # - name: build-z
        #   params:
        #     - name: pipeline-name
        #       value: build-push
        #     - name: pipeline-namespace
        #       value: multiarch-demo
        #     - name: openshift-server-url
        #       value: $(params.z-server-url)
        #     - name: openshift-token-secret
        #       value: builder-cluster-z-secret
        #   runAfter:
        #     - dockerfile-lint
        #   taskRef:
        #     kind: Task
        #     name: execute-remote-pipeline
  - name: manifest
    taskRef:
      kind: Task
      name: manifest
    runAfter:
      - build-x86
        #     - build-z
        #     - build-power
  - name: deploy
    params:
      - name: git-url
        value: $(tasks.setup.results.git-url)
      - name: git-revision
        value: $(tasks.setup.results.git-revision)
      - name: source-dir
        value: $(tasks.setup.results.source-dir)
      - name: image-server
        value: $(tasks.setup.results.image-server)
      - name: image-namespace
        value: $(tasks.setup.results.image-namespace)
      - name: image-repository
        value: $(tasks.setup.results.image-repository)
      - name: image-tag
        value: $(tasks.setup.results.image-tag)
      - name: app-namespace
        value: $(tasks.setup.results.app-namespace)
      - name: app-name
        value: $(tasks.setup.results.app-name)
      - name: deploy-ingress-type
        value: $(tasks.setup.results.deploy-ingress-type)
      - name: tools-image
        value: $(tasks.setup.results.tools-image)
    runAfter:
      - manifest
    taskRef:
      kind: Task
      name: ibm-deploy-v2-7-7
  - name: health
    params:
      - name: app-namespace
        value: $(tasks.setup.results.app-namespace)
      - name: app-name
        value: $(tasks.setup.results.app-name)
      - name: deploy-ingress-type
        value: $(tasks.setup.results.deploy-ingress-type)
      - name: health-protocol
        value: $(tasks.setup.results.health-protocol)
      - name: health-endpoint
        value: $(tasks.setup.results.health-endpoint)
      - name: health-url
        value: $(tasks.setup.results.health-url)
      - name: health-curl
        value: $(tasks.setup.results.health-curl)
      - name: tools-image
        value: $(tasks.setup.results.tools-image)
    runAfter:
      - deploy
    taskRef:
      kind: Task
      name: ibm-health-check-v2-7-8
  - name: tag-release
    params:
      - name: git-url
        value: $(tasks.setup.results.git-url)
      - name: git-revision
        value: $(tasks.setup.results.git-revision)
      - name: source-dir
        value: $(tasks.setup.results.source-dir)
      - name: js-image
        value: $(tasks.setup.results.js-image)
    runAfter:
      - health
    taskRef:
      kind: Task
      name: ibm-tag-release-v2-7-7
  - name: img-release
    params:
      - name: image-from
        value: $(tasks.setup.results.image-url)
      - name: image-to
        value: >-
          $(tasks.setup.results.image-release):$(tasks.tag-release.results.tag)
    runAfter:
      - tag-release
    taskRef:
      kind: Task
      name: ibm-img-release-v2-7-7
  - name: img-scan
    params:
      - name: image-url
        value: $(tasks.img-release.results.image-url)
      - name: scan-trivy
        value: $(tasks.setup.results.scan-trivy)
      - name: scan-ibm
        value: $(tasks.setup.results.scan-ibm)
    runAfter:
      - img-release
    taskRef:
      kind: Task
      name: ibm-img-scan-v2-7-7
  - name: helm-release
    params:
      - name: git-url
        value: $(tasks.setup.results.git-url)
      - name: git-revision
        value: $(tasks.setup.results.git-revision)
      - name: source-dir
        value: $(tasks.setup.results.source-dir)
      - name: image-url
        value: $(tasks.img-release.results.image-url)
      - name: app-name
        value: $(tasks.setup.results.app-name)
      - name: deploy-ingress-type
        value: $(tasks.setup.results.deploy-ingress-type)
      - name: tools-image
        value: $(tasks.setup.results.tools-image)
    runAfter:
      - img-scan
    taskRef:
      kind: Task
      name: ibm-helm-release-v2-7-7
  - name: gitops
    params:
      - name: app-name
        value: $(tasks.setup.results.app-name)
      - name: version
        value: $(tasks.tag-release.results.tag)
      - name: helm-url
        value: $(tasks.helm-release.results.helm-url)
      - name: tools-image
        value: $(tasks.setup.results.tools-image)
    runAfter:
      - helm-release
    taskRef:
      kind: Task
      name: ibm-gitops-v2-7-7



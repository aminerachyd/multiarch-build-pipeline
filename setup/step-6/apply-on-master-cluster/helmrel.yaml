apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    app.openshift.io/description:
      Publishes the helm chart to the helm repository
      using the version provided in the image-url
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    description:
      Publishes the helm chart to the helm repository using the version
      provided in the image-url
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"tekton.dev/v1beta1","kind":"Task","metadata":{"annotations":{"app.openshift.io/description":"Publishes the helm chart to the helm repository using the version provided in the image-url","app.openshift.io/vcs-ref":"master","app.openshift.io/vcs-uri":"https://github.com/IBM/ibm-garage-tekton-tasks","description":"Publishes the helm chart to the helm repository using the version provided in the image-url"},"labels":{"version":"2.7.7"},"name":"ibm-helm-release-v2-7-7","namespace":"tools"},"spec":{"params":[{"name":"git-url"},{"default":"master","name":"git-revision"},{"default":"/source","name":"source-dir"},{"default":"","name":"image-url"},{"default":"","name":"app-name"},{"default":"route","name":"deploy-ingress-type"},{"default":"","name":"helm-curl"},{"default":"quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4","name":"tools-image"}],"results":[{"description":"The url of the helm repository","name":"helm-url"}],"stepTemplate":{"volumeMounts":[{"mountPath":"$(params.source-dir)","name":"source"}]},"steps":[{"env":[{"name":"GIT_PASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"git-credentials","optional":true}}},{"name":"GIT_USERNAME","valueFrom":{"secretKeyRef":{"key":"username","name":"git-credentials","optional":true}}}],"image":"quay.io/ibmgaragecloud/alpine-git","name":"git-clone","script":"set +x\nif [[ -n \"${GIT_USERNAME}\" ]] \u0026\u0026 [[ -n \"${GIT_PASSWORD}\" ]]; then\n    git clone \"$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')\" $(params.source-dir)\nelse\n    set -x\n    git clone $(params.git-url) $(params.source-dir)\nfi\nset -x\ncd $(params.source-dir)\ngit checkout $(params.git-revision)\n"},{"env":[{"name":"TLS_SECRET_NAME","valueFrom":{"configMapKeyRef":{"key":"TLS_SECRET_NAME","name":"ibmcloud-config","optional":true}}},{"name":"INGRESS_SUBDOMAIN","valueFrom":{"configMapKeyRef":{"key":"INGRESS_SUBDOMAIN","name":"ibmcloud-config","optional":true}}},{"name":"ARTIFACTORY_URL","valueFrom":{"secretKeyRef":{"key":"ARTIFACTORY_URL","name":"artifactory-access","optional":true}}},{"name":"ARTIFACTORY_USER","valueFrom":{"secretKeyRef":{"key":"ARTIFACTORY_USER","name":"artifactory-access","optional":true}}},{"name":"ARTIFACTORY_ENCRYPT","valueFrom":{"secretKeyRef":{"key":"ARTIFACTORY_ENCRYPT","name":"artifactory-access","optional":true}}},{"name":"ARTIFACTORY_REPOSITORY_KEY","valueFrom":{"secretKeyRef":{"key":"ARTIFACTORY_REPOSITORY_KEY","name":"artifactory-access","optional":true}}},{"name":"HELM_URL","valueFrom":{"secretKeyRef":{"key":"HELM_URL","name":"helm-access","optional":true}}},{"name":"HELM_USER","valueFrom":{"secretKeyRef":{"key":"HELM_USER","name":"helm-access","optional":true}}},{"name":"HELM_PASSWORD","valueFrom":{"secretKeyRef":{"key":"HELM_PASSWORD","name":"helm-access","optional":true}}}],"image":"$(params.tools-image)","name":"package-helm","script":"#!/usr/bin/env bash\nset -ex\n\nCURL_FLAGS=\"$(params.helm-curl)\"\n\necho \"1. Package Helm Chart\"\n\nGIT_URL=\"$(params.git-url)\"\nGIT_REVISION=\"$(params.git-revision)\"\n\nIMAGE_SERVER=\"$(echo \"$(params.image-url)\" | awk -F / '{print $1}')\"\nIMAGE_NAMESPACE=\"$(echo \"$(params.image-url)\" | awk -F / '{print $2}')\"\nIMAGE_REPOSITORY=\"$(echo \"$(params.image-url)\" | awk -F / '{print $3}' | awk -F : '{print $1}')\"\nIMAGE_VERSION=\"$(echo \"$(params.image-url)\" | awk -F / '{print $3}' | awk -F : '{print $2}')\"\nIMAGE_URL=\"${IMAGE_SERVER}/${IMAGE_NAMESPACE}/${IMAGE_REPOSITORY}\"\n\nAPP_NAME=\"$(params.app-name)\"\nif [[ -z \"${APP_NAME}\" ]]; then\n  APP_NAME=\"${IMAGE_REPOSITORY}\"\nfi\n\nINGRESS_TYPE=\"$(params.deploy-ingress-type)\"\nif [[ \"${INGRESS_TYPE}\" == \"route\" ]]; then\n  ROUTE_ENABLED=\"true\"\n  INGRESS_ENABLED=\"false\"\nelse\n  ROUTE_ENABLED=\"false\"\n  INGRESS_ENABLED=\"true\"\nfi\n\nCHART_ROOT=$(find . -name chart)\necho \"CHART_ROOT: $CHART_ROOT\"\n\n# Make a copy to be able to edit the chart\nmkdir -p \"$(params.source-dir)/chart-temp\"\ncp -R \"$CHART_ROOT\" \"$(params.source-dir)/chart-temp/\"\nCHART_ROOT=\"$(params.source-dir)/chart-temp/chart\"\n\n\nCHART=$(find $CHART_ROOT -name 'Chart*.yaml')\necho \"CHART: $CHART\"\n\nCHART_NAME=$(cat $CHART | yq r - name)\necho \"CHART_NAME: $CHART_NAME\"\n\n# Update Chart name and version\nif [[ \"${CHART_NAME}\" != \"${APP_NAME}\" ]]; then\n  echo \"Renaming chart from ${CHART_NAME} to ${APP_NAME}\"\n  cp -R \"${CHART_ROOT}/${CHART_NAME}\" \"${CHART_ROOT}/${APP_NAME}\"\n  cat \"${CHART_ROOT}/${CHART_NAME}/Chart.yaml\" | \\\n      yq w - name \"${APP_NAME}\" | \\\n      yq w - version \"${IMAGE_VERSION}\" \u003e \"${CHART_ROOT}/${APP_NAME}/Chart.yaml\"\nelse\n  echo \"Chart name and image name match: ${APP_NAME}\"\nfi\nCHART_NAME=\"${APP_NAME}\"\n\nCHART_PATH=\"${CHART_ROOT}/${APP_NAME}\"\n\necho \"\"\necho \"Chart ${CHART_PATH}\"\ncat ${CHART_PATH}/Chart.yaml\n\nRELEASE_NAME=\"${APP_NAME}\"\necho \"RELEASE_NAME: $RELEASE_NAME\"\n\necho $(helm version)\n\nPREFIX=\"\"\nif [[ -f \"${CHART_PATH}/requirements.yaml\" ]] || grep -Eq \"^dependencies:\" \"${CHART_PATH}/Chart.yaml\"; then\n    DEPENDENCY_FILE=\"${CHART_PATH}/Chart.yaml\"\n    if [[ -f \"${CHART_PATH}/requirements.yaml\" ]]; then\n        DEPENDENCY_FILE=\"${CHART_PATH}/requirements.yaml\"\n    fi\n\n    PREFIX=\"$(yq r -j \"${DEPENDENCY_FILE}\" | jq -r '.dependencies | .[] | .alias // .name' | head -1).\"\nfi\n\n# Update helm chart with repository and tag values\ncat ${CHART_PATH}/values.yaml | \\\n    yq w - \"${PREFIX}nameOverride\" \"${APP_NAME}\" | \\\n    yq w - \"${PREFIX}fullnameOverride\" \"${APP_NAME}\" | \\\n    yq w - \"${PREFIX}vcsInfo.repoUrl\" \"${GIT_URL}\" | \\\n    yq w - \"${PREFIX}vcsInfo.branch\" \"${GIT_REVISION}\" | \\\n    yq w - \"${PREFIX}image.repository\" \"${IMAGE_URL}\" | \\\n    yq w - \"${PREFIX}image.tag\" \"${IMAGE_VERSION}\" | \\\n    yq w - \"${PREFIX}ingress.enabled\" \"${INGRESS_ENABLED}\" | \\\n    yq w - \"${PREFIX}route.enabled\" \"${ROUTE_ENABLED}\" \u003e ./values.yaml.tmp\ncp ./values.yaml.tmp ${CHART_PATH}/values.yaml\ncat ${CHART_PATH}/values.yaml\n\necho \"CHECKING CHART (lint)\"\nhelm lint ${CHART_PATH}\n\n\necho \"2. Publish Helm Chart\"\n\nif [[ -z \"${HELM_URL}\" ]] \u0026\u0026 [[ -z \"${HELM_USER}\" ]]; then\n  if [[ -z \"${ARTIFACTORY_URL}\" ]]; then\n    echo \"It looks like Artifactory has not been installed (ARTIFACTORY_URL from artifactory-acess secret is missing). Skipping step.\"\n    exit 0\n  fi\n\n  set +x\n  if [[ -z \"${ARTIFACTORY_USER}\" ]]; then\n    echo \"Something's wrong... The Artifactory url is configured but the Artifactory credentials cannot be found. Check your artifactory-access secret.\"\n    exit 1\n  fi\n\n  if [[ -z \"${ARTIFACTORY_ENCRYPT}\" ]]; then\n      echo \"It looks like your Artifactory installation is not complete. Please complete the steps found here - http://ibm.biz/complete-setup\"\n      exit 1\n  fi\n\n  HELM_USER=\"${ARTIFACTORY_USER}\"\n  set +x\n  HELM_PASSWORD=\"${ARTIFACTORY_ENCRYPT}\"\n  set -x\n\n  if [[ -z \"${ARTIFACTORY_REPOSITORY_KEY}\" ]]; then\n    ARTIFACTORY_REPOSITORY_KEY=\"generic-local\"\n  fi\n\n  if [[ -z \"${HELM_URL}\" ]]; then\n    HELM_URL=\"${ARTIFACTORY_URL}/artifactory/${ARTIFACTORY_REPOSITORY_KEY}\"\n  fi\n\nfi\n\nhelm dep update \"${CHART_PATH}\"\n\n# Package Helm Chart\nhelm package --version ${IMAGE_VERSION} ${CHART_PATH}\n\n# Get the index and re index it with current Helm Chart\nset +x\necho \"curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -O ${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml\"\ncurl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -O \"${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml\"\nset -x\n\napiVersion=$(grep apiVersion ./index.yaml | sed -E \"s/apiVersion: (.*)/\\1/g\")\nif [[ $(cat index.yaml | jq '.errors[0].status') != \"404\" ]] \u0026\u0026 [[ -n \"${apiVersion}\" ]]; then\n    # Merge the chart index with the current index.yaml held in Artifactory\n    echo \"Merging Chart into index.yaml for Chart Repository\"\n    helm repo index . --url ${HELM_URL}/${IMAGE_NAMESPACE} --merge index.yaml\nelse\n    # Dont Merge this is first time one is being created\n    echo \"Creating a new index.yaml for Chart Repository\"\n    rm index.yaml\n    helm repo index . --url ${HELM_URL}/${IMAGE_NAMESPACE}\nfi;\n\n# Persist the Helm Chart in Helm repo for us by ArgoCD\nset +x\necho \"curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T ${CHART_NAME}-${IMAGE_VERSION}.tgz ${HELM_URL}/${IMAGE_NAMESPACE}/${CHART_NAME}-${IMAGE_VERSION}.tgz\"\ncurl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T ${CHART_NAME}-${IMAGE_VERSION}.tgz \"${HELM_URL}/${IMAGE_NAMESPACE}/${CHART_NAME}-${IMAGE_VERSION}.tgz\"\n\n# Persist the Helm Index in the helm repo for us by ArgoCD\necho \"curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T index.yaml ${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml\"\ncurl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T index.yaml \"${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml\"\n\necho -n \"${HELM_URL}/${IMAGE_NAMESPACE}\" | tee $(results.helm-url.path)\n","workingDir":"$(params.source-dir)"}],"volumes":[{"emptyDir":{},"name":"source"}]}}
  creationTimestamp: "2022-04-26T09:49:11Z"
  generation: 1
  labels:
    version: 2.7.7
  name: ibm-helm-release-v2-7-7
  resourceVersion: "137872745"
  uid: b9c4e77c-dad5-4008-b543-141626d9faf5
spec:
  params:
    - name: git-url
      type: string
    - default: master
      name: git-revision
      type: string
    - default: /source
      name: source-dir
      type: string
    - default: ""
      name: image-url
      type: string
    - default: ""
      name: app-name
      type: string
    - default: route
      name: deploy-ingress-type
      type: string
    - default: ""
      name: helm-curl
      type: string
    - default: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
      name: tools-image
      type: string
    - name: image-tag
      type: string
  results:
    - description: The url of the helm repository
      name: helm-url
  stepTemplate:
    name: ""
    resources: {}
    volumeMounts:
      - mountPath: $(params.source-dir)
        name: source
  steps:
    - env:
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: git-credentials
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: git-credentials
              optional: true
      image: quay.io/ibmgaragecloud/alpine-git
      name: git-clone
      resources: {}
      script: |
        set +x
        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
        else
            set -x
            git clone $(params.git-url) $(params.source-dir)
        fi
        set -x
        cd $(params.source-dir)
        git checkout $(params.git-revision)
    - env:
        - name: TLS_SECRET_NAME
          valueFrom:
            configMapKeyRef:
              key: TLS_SECRET_NAME
              name: ibmcloud-config
              optional: true
        - name: INGRESS_SUBDOMAIN
          valueFrom:
            configMapKeyRef:
              key: INGRESS_SUBDOMAIN
              name: ibmcloud-config
              optional: true
        - name: ARTIFACTORY_URL
          valueFrom:
            secretKeyRef:
              key: ARTIFACTORY_URL
              name: artifactory-access
              optional: true
        - name: ARTIFACTORY_USER
          valueFrom:
            secretKeyRef:
              key: ARTIFACTORY_USER
              name: artifactory-access
              optional: true
        - name: ARTIFACTORY_ENCRYPT
          valueFrom:
            secretKeyRef:
              key: ARTIFACTORY_ENCRYPT
              name: artifactory-access
              optional: true
        - name: ARTIFACTORY_REPOSITORY_KEY
          valueFrom:
            secretKeyRef:
              key: ARTIFACTORY_REPOSITORY_KEY
              name: artifactory-access
              optional: true
        - name: HELM_URL
          valueFrom:
            secretKeyRef:
              key: HELM_URL
              name: helm-access
              optional: true
        - name: HELM_USER
          valueFrom:
            secretKeyRef:
              key: HELM_USER
              name: helm-access
              optional: true
        - name: HELM_PASSWORD
          valueFrom:
            secretKeyRef:
              key: HELM_PASSWORD
              name: helm-access
              optional: true
      image: $(params.tools-image)
      name: package-helm
      resources: {}
      script: |
        #!/usr/bin/env bash
        set -ex

        CURL_FLAGS="$(params.helm-curl)"

        echo "1. Package Helm Chart"

        GIT_URL="$(params.git-url)"
        GIT_REVISION="$(params.git-revision)"

        IMAGE_SERVER="$(echo "$(params.image-url)" | awk -F / '{print $1}')"
        IMAGE_NAMESPACE="$(echo "$(params.image-url)" | awk -F / '{print $2}')"
        IMAGE_REPOSITORY="$(echo "$(params.image-url)" | awk -F / '{print $3}' | awk -F : '{print $1}')"
        IMAGE_VERSION="$(params.image-tag)"
        IMAGE_URL="${IMAGE_SERVER}/${IMAGE_NAMESPACE}/${IMAGE_REPOSITORY}"

        APP_NAME="$(params.app-name)"
        if [[ -z "${APP_NAME}" ]]; then
          APP_NAME="${IMAGE_REPOSITORY}"
        fi

        INGRESS_TYPE="$(params.deploy-ingress-type)"
        if [[ "${INGRESS_TYPE}" == "route" ]]; then
          ROUTE_ENABLED="true"
          INGRESS_ENABLED="false"
        else
          ROUTE_ENABLED="false"
          INGRESS_ENABLED="true"
        fi

        CHART_ROOT=$(find . -name chart)
        echo "CHART_ROOT: $CHART_ROOT"

        # Make a copy to be able to edit the chart
        mkdir -p "$(params.source-dir)/chart-temp"
        cp -R "$CHART_ROOT" "$(params.source-dir)/chart-temp/"
        CHART_ROOT="$(params.source-dir)/chart-temp/chart"


        CHART=$(find $CHART_ROOT -name 'Chart*.yaml')
        echo "CHART: $CHART"

        CHART_NAME=$(cat $CHART | yq r - name)
        echo "CHART_NAME: $CHART_NAME"

        # Update Chart name and version
        if [[ "${CHART_NAME}" != "${APP_NAME}" ]]; then
          echo "Renaming chart from ${CHART_NAME} to ${APP_NAME}"
          cp -R "${CHART_ROOT}/${CHART_NAME}" "${CHART_ROOT}/${APP_NAME}"
          cat "${CHART_ROOT}/${CHART_NAME}/Chart.yaml" | \
              yq w - name "${APP_NAME}" | \
              yq w - version "${IMAGE_VERSION}" > "${CHART_ROOT}/${APP_NAME}/Chart.yaml"
        else
          echo "Chart name and image name match: ${APP_NAME}"
        fi
        CHART_NAME="${APP_NAME}"

        CHART_PATH="${CHART_ROOT}/${APP_NAME}"

        echo ""
        echo "Chart ${CHART_PATH}"
        cat ${CHART_PATH}/Chart.yaml

        RELEASE_NAME="${APP_NAME}"
        echo "RELEASE_NAME: $RELEASE_NAME"

        echo $(helm version)

        PREFIX=""
        if [[ -f "${CHART_PATH}/requirements.yaml" ]] || grep -Eq "^dependencies:" "${CHART_PATH}/Chart.yaml"; then
            DEPENDENCY_FILE="${CHART_PATH}/Chart.yaml"
            if [[ -f "${CHART_PATH}/requirements.yaml" ]]; then
                DEPENDENCY_FILE="${CHART_PATH}/requirements.yaml"
            fi

            PREFIX="$(yq r -j "${DEPENDENCY_FILE}" | jq -r '.dependencies | .[] | .alias // .name' | head -1)."
        fi

        # Update helm chart with repository and tag values
        cat ${CHART_PATH}/values.yaml | \
            yq w - "${PREFIX}nameOverride" "${APP_NAME}" | \
            yq w - "${PREFIX}fullnameOverride" "${APP_NAME}" | \
            yq w - "${PREFIX}vcsInfo.repoUrl" "${GIT_URL}" | \
            yq w - "${PREFIX}vcsInfo.branch" "${GIT_REVISION}" | \
            yq w - "${PREFIX}image.repository" "${IMAGE_URL}" | \
            yq w - "${PREFIX}image.tag" "${IMAGE_VERSION}" | \
            yq w - "${PREFIX}ingress.enabled" "${INGRESS_ENABLED}" | \
            yq w - "${PREFIX}route.enabled" "${ROUTE_ENABLED}" > ./values.yaml.tmp
        cp ./values.yaml.tmp ${CHART_PATH}/values.yaml
        cat ${CHART_PATH}/values.yaml

        echo "CHECKING CHART (lint)"
        helm lint ${CHART_PATH}


        echo "2. Publish Helm Chart"

        if [[ -z "${HELM_URL}" ]] && [[ -z "${HELM_USER}" ]]; then
          if [[ -z "${ARTIFACTORY_URL}" ]]; then
            echo "It looks like Artifactory has not been installed (ARTIFACTORY_URL from artifactory-acess secret is missing). Skipping step."
            exit 0
          fi

          set +x
          if [[ -z "${ARTIFACTORY_USER}" ]]; then
            echo "Something's wrong... The Artifactory url is configured but the Artifactory credentials cannot be found. Check your artifactory-access secret."
            exit 1
          fi

          if [[ -z "${ARTIFACTORY_ENCRYPT}" ]]; then
              echo "It looks like your Artifactory installation is not complete. Please complete the steps found here - http://ibm.biz/complete-setup"
              exit 1
          fi

          HELM_USER="${ARTIFACTORY_USER}"
          set +x
          HELM_PASSWORD="${ARTIFACTORY_ENCRYPT}"
          set -x

          if [[ -z "${ARTIFACTORY_REPOSITORY_KEY}" ]]; then
            ARTIFACTORY_REPOSITORY_KEY="generic-local"
          fi

          if [[ -z "${HELM_URL}" ]]; then
            HELM_URL="${ARTIFACTORY_URL}/artifactory/${ARTIFACTORY_REPOSITORY_KEY}"
          fi

        fi

        helm dep update "${CHART_PATH}"

        # Package Helm Chart
        helm package --version ${IMAGE_VERSION} ${CHART_PATH}

        # Get the index and re index it with current Helm Chart
        set +x
        echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -O ${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"
        curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -O "${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"
        set -x

        apiVersion=$(grep apiVersion ./index.yaml | sed -E "s/apiVersion: (.*)/\1/g")
        if [[ $(cat index.yaml | jq '.errors[0].status') != "404" ]] && [[ -n "${apiVersion}" ]]; then
            # Merge the chart index with the current index.yaml held in Artifactory
            echo "Merging Chart into index.yaml for Chart Repository"
            helm repo index . --url ${HELM_URL}/${IMAGE_NAMESPACE} --merge index.yaml
        else
            # Dont Merge this is first time one is being created
            echo "Creating a new index.yaml for Chart Repository"
            rm index.yaml
            helm repo index . --url ${HELM_URL}/${IMAGE_NAMESPACE}
        fi;

        # Persist the Helm Chart in Helm repo for us by ArgoCD
        set +x
        echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T ${CHART_NAME}-${IMAGE_VERSION}.tgz ${HELM_URL}/${IMAGE_NAMESPACE}/${CHART_NAME}-${IMAGE_VERSION}.tgz"
        curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T ${CHART_NAME}-${IMAGE_VERSION}.tgz "${HELM_URL}/${IMAGE_NAMESPACE}/${CHART_NAME}-${IMAGE_VERSION}.tgz"

        # Persist the Helm Index in the helm repo for us by ArgoCD
        echo "curl ${CURL_FLAGS} -u${HELM_USER}:xxxx -s -T index.yaml ${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"
        curl ${CURL_FLAGS} -u${HELM_USER}:${HELM_PASSWORD} -s -T index.yaml "${HELM_URL}/${IMAGE_NAMESPACE}/index.yaml"

        echo -n "${HELM_URL}/${IMAGE_NAMESPACE}" | tee $(results.helm-url.path)
      workingDir: $(params.source-dir)
  volumes:
    - emptyDir: {}
      name: source

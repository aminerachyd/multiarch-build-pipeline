apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    app.openshift.io/description: Sets up the pipeline environment and generates/normalizes
      a number of param values
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    description: Sets up the pipeline environment and generates/normalizes a number
      of param values
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"tekton.dev/v1beta1","kind":"Task","metadata":{"annotations":{"app.openshift.io/description":"Sets up the pipeline environment and generates/normalizes a number of param values","app.openshift.io/vcs-ref":"master","app.openshift.io/vcs-uri":"https://github.com/IBM/ibm-garage-tekton-tasks","description":"Sets up the pipeline environment and generates/normalizes a number of param values"},"labels":{"version":"2.7.8"},"name":"ibm-setup-v2-7-8","namespace":"tools"},"spec":{"params":[{"description":"The url for the git repository","name":"git-url"},{"default":"master","description":"The git revision (branch, tag, or sha) that should be built","name":"git-revision"},{"default":"/source","name":"source-dir"},{"default":"","description":"The dev image (use image-release for released image)","name":"image-url"},{"default":"","description":"The dev image registry server if params.image-url not provided","name":"image-server"},{"default":"","description":"The dev image registry namespace if params.image-url not provided","name":"image-namespace"},{"default":"","description":"The dev image registry repository/imagename if params.image-url not provided","name":"image-repository"},{"default":"","description":"The dev image registry tag if params.image-url not provided","name":"image-tag"},{"default":"","description":"The url of final released image","name":"image-release"},{"default":"","description":"The openshift/kubernetes namespace to deploy dev app","name":"app-namespace"},{"default":"","description":"The app name to be use in openshift/kuberentes deployment and helm chart","name":"app-name"},{"default":"route","name":"deploy-ingress-type"},{"default":"https","description":"Protocol to check health after deployment, either https or grpc, defaults to https","name":"health-protocol"},{"default":"/health","description":"Endpoint to check health after deployment, liberty uses / not /health","name":"health-endpoint"},{"default":"","description":"Override for health check url","name":"health-url"},{"default":"-k","description":"Override for health check curl flags","name":"health-curl"},{"default":"false","description":"Flag indicating that a Vulnerability Advisor scan should be performed","name":"scan-image"},{"default":"quay.io/aminerachyd/ibmcloud-dev:latest","name":"tools-image"},{"default":"quay.io/ibmgaragecloud/node:lts-stretch","name":"js-image"},{"default":"","description":"Name of the ACE Toolkit project","name":"ace-project"},{"default":"true","description":"Flag indication that Dockerfile will be linted","name":"lint-dockerfile"}],"results":[{"name":"git-url"},{"name":"git-revision"},{"name":"source-dir"},{"name":"image-url"},{"name":"image-server"},{"name":"image-namespace"},{"name":"image-repository"},{"name":"image-tag"},{"name":"image-release"},{"name":"app-namespace"},{"name":"app-name"},{"name":"deploy-ingress-type"},{"name":"health-protocol"},{"name":"health-endpoint"},{"name":"health-url"},{"name":"health-curl"},{"name":"tools-image"},{"name":"js-image"},{"name":"scan-image"},{"name":"scan-trivy"},{"name":"scan-ibm"},{"name":"ace-project"},{"name":"dockerfile-lint"}],"stepTemplate":{"volumeMounts":[{"mountPath":"$(params.source-dir)","name":"source"}]},"steps":[{"env":[{"name":"NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"GIT_PASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"git-credentials","optional":true}}},{"name":"GIT_USERNAME","valueFrom":{"secretKeyRef":{"key":"username","name":"git-credentials","optional":true}}},{"name":"REGISTRY_RELEASE_SERVER","valueFrom":{"secretKeyRef":{"key":"REGISTRY_URL","name":"registry-access","optional":true}}},{"name":"REGISTRY_RELEASE_NAMESPACE","valueFrom":{"secretKeyRef":{"key":"REGISTRY_NAMESPACE","name":"registry-access","optional":true}}}],"image":"quay.io/ibmgaragecloud/alpine-git","name":"git-clone","script":"set +x\nif [[ -n \"${GIT_USERNAME}\" ]] \u0026\u0026 [[ -n \"${GIT_PASSWORD}\" ]]; then\n    git clone \"$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')\" $(params.source-dir)\nelse\n    git clone $(params.git-url) $(params.source-dir)\nfi\ncd $(params.source-dir)\ngit checkout $(params.git-revision)\n\n# Results\n# Defaults\necho -n \"$(params.git-url)\"\u003e$(results.git-url.path)\necho -n \"$(git rev-parse --verify HEAD)\"\u003e$(results.git-revision.path)\necho -n \"$(params.source-dir)\"\u003e$(results.source-dir.path)\necho -n \"$(params.app-namespace)\"\u003e$(results.app-namespace.path)\necho -n \"$(params.app-name)\"\u003e$(results.app-name.path)\necho -n \"$(params.deploy-ingress-type)\"\u003e$(results.deploy-ingress-type.path)\necho -n \"$(params.health-protocol)\"\u003e$(results.health-protocol.path)\necho -n \"$(params.health-endpoint)\"\u003e$(results.health-endpoint.path)\necho -n \"$(params.health-url)\"\u003e$(results.health-url.path)\necho -n \"$(params.health-curl)\"\u003e$(results.health-curl.path)\necho -n \"$(params.tools-image)\"\u003e$(results.tools-image.path)\necho -n \"$(params.js-image)\"\u003e$(results.js-image.path)\necho -n \"$(params.ace-project)\"\u003e$(results.ace-project.path)\n\n\nREGISTRY_SERVER=\"$(params.image-server)\"\nREGISTRY_NAMESPACE=\"$(params.image-namespace)\"\nREGISTRY_REPOSITORY=\"$(params.image-repository)\"\nREGISTRY_TAG=\"$(params.image-tag)\"\n\nif [[ -n \"$(params.image-url)\" ]]; then\n  REGISTRY_SERVER_VALUE=$(echo \"$(params.image-url)\" | awk -F / '{print $1}')\n  if [[ -n \"${REGISTRY_SERVER_VALUE}\" ]]; then\n    REGISTRY_SERVER=\"${REGISTRY_SERVER_VALUE}\"\n  fi\n\n  REGISTRY_NAMESPACE_VALUE=$(echo \"$(params.image-url)\" | awk -F / '{print $2}')\n  if [[ -n \"${REGISTRY_NAMESPACE_VALUE}\" ]]; then\n    if [[ \"${REGISTRY_NAMESPACE_VALUE}\" = '$NAMESPACE' ]]; then\n      REGISTRY_NAMESPACE=${NAMESPACE}\n    else\n      REGISTRY_NAMESPACE=\"${REGISTRY_NAMESPACE_VALUE}\"\n    fi\n  fi\n\n  REGISTRY_REPOSITORY_VALUE=$(echo \"$(params.image-url)\" | awk -F / '{print $3}' |  awk -F : '{print $1}')\n  if [[ -n \"${REGISTRY_REPOSITORY_VALUE}\" ]]; then\n    REGISTRY_REPOSITORY=\"${REGISTRY_REPOSITORY_VALUE}\"\n  fi\n\n  REGISTRY_TAG_VALUE=$(echo \"$(params.image-url)\" | awk -F / '{print $3}' | awk -F : '{print $2}')\n  if [[ -n \"${REGISTRY_TAG_VALUE}\" ]]; then\n    REGISTRY_TAG=\"${REGISTRY_TAG_VALUE}\"\n  fi\nfi\n\nif [[ -z \"${REGISTRY_SERVER}\" ]]; then\n  # Assume is internal\n  REGISTRY_SERVER=\"image-registry.openshift-image-registry.svc:5000\"\nfi\nif [[ -z \"${REGISTRY_NAMESPACE}\" ]]; then\n  # Assume current k8s namespace\n  REGISTRY_NAMESPACE=\"${NAMESPACE}\"\nfi\nif [[ -z \"${REGISTRY_REPOSITORY}\" ]]; then\n  # Assume repo dir is image repository/image-name\n  REGISTRY_REPOSITORY=\"$(basename $(echo -n $(git config --get remote.origin.url)) .git | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')\"\nfi\nif [[ -z \"${REGISTRY_TAG}\" ]]; then\n  # Assume short git commit revision\n  REGISTRY_TAG=\"$(git rev-parse --verify HEAD --short)\"\nfi\necho -n \"${REGISTRY_SERVER}\"\u003e$(results.image-server.path)\necho -n \"${REGISTRY_NAMESPACE}\"\u003e$(results.image-namespace.path)\necho -n \"${REGISTRY_REPOSITORY}\"\u003e$(results.image-repository.path)\necho -n \"${REGISTRY_TAG}\"\u003e$(results.image-tag.path)\necho -n \"${REGISTRY_SERVER}/${REGISTRY_NAMESPACE}/${REGISTRY_REPOSITORY}:${REGISTRY_TAG}\"\u003e$(results.image-url.path)\n\nif [[ -z \"$(params.app-namespace)\" ]]; then\n  # Assume current namespace\n  echo -n \"${NAMESPACE}\"\u003e$(results.app-namespace.path)\nfi\n\nif [[ -z \"$(params.app-name)\" ]]; then\n  # Assume image repository/name\n  echo -n \"${REGISTRY_REPOSITORY}\"\u003e$(results.app-name.path)\nfi\n\n\nif [[ -n \"$(params.image-release)\" ]]; then\n  REGISTRY_RELEASE_SERVER_VALUE=$(echo \"$(params.image-release)\" | awk -F / '{print $1}')\n  if [[ -n \"${REGISTRY_RELEASE_SERVER_VALUE}\" ]]; then\n    REGISTRY_RELEASE_SERVER=\"${REGISTRY_RELEASE_SERVER_VALUE}\"\n  fi\n\n  REGISTRY_RELEASE_NAMESPACE_VALUE=$(echo \"$(params.image-release)\" | awk -F / '{print $2}')\n  if [[ -n \"${REGISTRY_RELEASE_NAMESPACE_VALUE}\" ]]; then\n    if [[ \"${REGISTRY_RELEASE_NAMESPACE_VALUE}\" = '$NAMESPACE' ]]; then\n      REGISTRY_RELEASE_NAMESPACE=${NAMESPACE}\n    else\n      REGISTRY_RELEASE_NAMESPACE=\"${REGISTRY_RELEASE_NAMESPACE_VALUE}\"\n    fi\n  elif [[ \"${REGISTRY_RELEASE_SERVER}\" = \"image-registry.openshift-image-registry.svc:5000\" ]]; then\n    REGISTRY_RELEASE_NAMESPACE=${NAMESPACE}\n  fi\nfi\nif [[ -z \"${REGISTRY_RELEASE_NAMESPACE}\" ]]; then\n  # Assume current k8s namespace\n  REGISTRY_RELEASE_NAMESPACE=\"${NAMESPACE}\"\nfi\nif [[ -z \"${REGISTRY_RELEASE_SERVER}\" ]]; then\n  # Assume internal registry\n  REGISTRY_RELEASE_SERVER=\"image-registry.openshift-image-registry.svc:5000\"\nfi\nREGISTRY_RELEASE_URL=\"${REGISTRY_RELEASE_SERVER}/${REGISTRY_RELEASE_NAMESPACE}/${REGISTRY_REPOSITORY}\"\necho -n \"${REGISTRY_RELEASE_URL}\"\u003e$(results.image-release.path)\n\nPERFORM_SCAN=\"$(params.scan-image)\"\nPERFORM_SCAN_IBM=\"false\"\nPERFORM_SCAN_TRIVY=\"false\"\nif [[ \"${PERFORM_SCAN}\" == \"true\" ]]; then\n  echo \"User selected to perform container image scanning\"\n  if echo \"$REGISTRY_RELEASE_URL\" | grep 'icr.io'; then\n    echo \"Using IBM Container registry, enabling scanning using VA\"\n    PERFORM_SCAN_IBM=\"true\"\n  else\n    echo \"Not using IBM Container registry, enabling scanning using trivy\"\n    PERFORM_SCAN_TRIVY=\"true\"\n  fi\nfi\n\necho -n \"${PERFORM_SCAN}\"\u003e$(results.scan-image.path)\necho -n \"${PERFORM_SCAN_TRIVY}\"\u003e$(results.scan-trivy.path)\necho -n \"${PERFORM_SCAN_IBM}\"\u003e$(results.scan-ibm.path)\n\nif [[ -z \"$(params.ace-project)\" ]]; then\n  # Retrieve name of ACE Toolkit project\n  ACE_PROJECT=$(ls workspace || true)\n  echo -n \"${ACE_PROJECT}\"\u003e$(results.ace-project.path)\nfi\n\nPERFORM_LINT=\"$(params.lint-dockerfile)\"\necho -n \"${PERFORM_LINT}\"\u003e$(results.dockerfile-lint.path)\n\nfor f in /tekton/results/*; do echo \"results.$(basename $f)=$(cat $f)\"; done\n"}],"volumes":[{"emptyDir":{},"name":"source"}]}}
  creationTimestamp: "2022-04-26T09:49:11Z"
  generation: 1
  labels:
    version: 2.7.8
  name: ibm-setup-v2-7-8
  resourceVersion: "137872748"
  uid: 135ef85b-6f1d-491e-8afe-1e8d8fb99025
spec:
  params:
  - description: The url for the git repository
    name: git-url
    type: string
  - default: master
    description: The git revision (branch, tag, or sha) that should be built
    name: git-revision
    type: string
  - default: /source
    name: source-dir
    type: string
  - default: ""
    description: The dev image (use image-release for released image)
    name: image-url
    type: string
  - default: ""
    description: The dev image registry server if params.image-url not provided
    name: image-server
    type: string
  - default: ""
    description: The dev image registry namespace if params.image-url not provided
    name: image-namespace
    type: string
  - default: ""
    description: The dev image registry repository/imagename if params.image-url not
      provided
    name: image-repository
    type: string
  - default: ""
    description: The dev image registry tag if params.image-url not provided
    name: image-tag
    type: string
  - default: ""
    description: The url of final released image
    name: image-release
    type: string
  - default: ""
    description: The openshift/kubernetes namespace to deploy dev app
    name: app-namespace
    type: string
  - default: ""
    description: The app name to be use in openshift/kuberentes deployment and helm
      chart
    name: app-name
    type: string
  - default: route
    name: deploy-ingress-type
    type: string
  - default: https
    description: Protocol to check health after deployment, either https or grpc,
      defaults to https
    name: health-protocol
    type: string
  - default: /health
    description: Endpoint to check health after deployment, liberty uses / not /health
    name: health-endpoint
    type: string
  - default: ""
    description: Override for health check url
    name: health-url
    type: string
  - default: -k
    description: Override for health check curl flags
    name: health-curl
    type: string
  - default: "false"
    description: Flag indicating that a Vulnerability Advisor scan should be performed
    name: scan-image
    type: string
  - default: quay.io/aminerachyd/ibmcloud-dev:latest
    name: tools-image
    type: string
  - default: quay.io/ibmgaragecloud/node:lts-stretch
    name: js-image
    type: string
  - default: ""
    description: Name of the ACE Toolkit project
    name: ace-project
    type: string
  - default: "true"
    description: Flag indication that Dockerfile will be linted
    name: lint-dockerfile
    type: string
  results:
  - description: ""
    name: git-url
  - description: ""
    name: git-revision
  - description: ""
    name: source-dir
  - description: ""
    name: image-url
  - description: ""
    name: image-server
  - description: ""
    name: image-namespace
  - description: ""
    name: image-repository
  - description: ""
    name: image-tag
  - description: ""
    name: image-release
  - description: ""
    name: app-namespace
  - description: ""
    name: app-name
  - description: ""
    name: deploy-ingress-type
  - description: ""
    name: health-protocol
  - description: ""
    name: health-endpoint
  - description: ""
    name: health-url
  - description: ""
    name: health-curl
  - description: ""
    name: tools-image
  - description: ""
    name: js-image
  - description: ""
    name: scan-image
  - description: ""
    name: scan-trivy
  - description: ""
    name: scan-ibm
  - description: ""
    name: ace-project
  - description: ""
    name: dockerfile-lint
  stepTemplate:
    name: ""
    resources: {}
    volumeMounts:
    - mountPath: $(params.source-dir)
      name: source
  steps:
  - env:
    - name: NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: GIT_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: git-credentials
          optional: true
    - name: GIT_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: git-credentials
          optional: true
    - name: REGISTRY_RELEASE_SERVER
      valueFrom:
        secretKeyRef:
          key: REGISTRY_URL
          name: registry-access
          optional: true
    - name: REGISTRY_RELEASE_NAMESPACE
      valueFrom:
        secretKeyRef:
          key: REGISTRY_NAMESPACE
          name: registry-access
          optional: true
    image: quay.io/ibmgaragecloud/alpine-git
    name: git-clone
    resources: {}
    script: |
      set +x
      if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
          git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
      else
          git clone $(params.git-url) $(params.source-dir)
      fi
      cd $(params.source-dir)
      git checkout $(params.git-revision)

      # Results
      # Defaults
      echo -n "$(params.git-url)">$(results.git-url.path)
      echo -n "$(git rev-parse --verify HEAD)">$(results.git-revision.path)
      echo -n "$(params.source-dir)">$(results.source-dir.path)
      echo -n "$(params.app-namespace)">$(results.app-namespace.path)
      echo -n "$(params.app-name)">$(results.app-name.path)
      echo -n "$(params.deploy-ingress-type)">$(results.deploy-ingress-type.path)
      echo -n "$(params.health-protocol)">$(results.health-protocol.path)
      echo -n "$(params.health-endpoint)">$(results.health-endpoint.path)
      echo -n "$(params.health-url)">$(results.health-url.path)
      echo -n "$(params.health-curl)">$(results.health-curl.path)
      echo -n "$(params.tools-image)">$(results.tools-image.path)
      echo -n "$(params.js-image)">$(results.js-image.path)
      echo -n "$(params.ace-project)">$(results.ace-project.path)


      REGISTRY_SERVER="$(params.image-server)"
      REGISTRY_NAMESPACE="$(params.image-namespace)"
      REGISTRY_REPOSITORY="$(params.image-repository)"
      REGISTRY_TAG="$(params.image-tag)"

      if [[ -n "$(params.image-url)" ]]; then
        REGISTRY_SERVER_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $1}')
        if [[ -n "${REGISTRY_SERVER_VALUE}" ]]; then
          REGISTRY_SERVER="${REGISTRY_SERVER_VALUE}"
        fi

        REGISTRY_NAMESPACE_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $2}')
        if [[ -n "${REGISTRY_NAMESPACE_VALUE}" ]]; then
          if [[ "${REGISTRY_NAMESPACE_VALUE}" = '$NAMESPACE' ]]; then
            REGISTRY_NAMESPACE=${NAMESPACE}
          else
            REGISTRY_NAMESPACE="${REGISTRY_NAMESPACE_VALUE}"
          fi
        fi

        REGISTRY_REPOSITORY_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $3}' |  awk -F : '{print $1}')
        if [[ -n "${REGISTRY_REPOSITORY_VALUE}" ]]; then
          REGISTRY_REPOSITORY="${REGISTRY_REPOSITORY_VALUE}"
        fi

        REGISTRY_TAG_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $3}' | awk -F : '{print $2}')
        if [[ -n "${REGISTRY_TAG_VALUE}" ]]; then
          REGISTRY_TAG="${REGISTRY_TAG_VALUE}"
        fi
      fi

      if [[ -z "${REGISTRY_SERVER}" ]]; then
        # Assume is internal
        REGISTRY_SERVER="image-registry.openshift-image-registry.svc:5000"
      fi
      if [[ -z "${REGISTRY_NAMESPACE}" ]]; then
        # Assume current k8s namespace
        REGISTRY_NAMESPACE="${NAMESPACE}"
      fi
      if [[ -z "${REGISTRY_REPOSITORY}" ]]; then
        # Assume repo dir is image repository/image-name
        REGISTRY_REPOSITORY="$(basename $(echo -n $(git config --get remote.origin.url)) .git | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')"
      fi
      if [[ -z "${REGISTRY_TAG}" ]]; then
        # Assume short git commit revision
        REGISTRY_TAG="$(git rev-parse --verify HEAD --short)"
      fi
      echo -n "${REGISTRY_SERVER}">$(results.image-server.path)
      echo -n "${REGISTRY_NAMESPACE}">$(results.image-namespace.path)
      echo -n "${REGISTRY_REPOSITORY}">$(results.image-repository.path)
      echo -n "${REGISTRY_TAG}">$(results.image-tag.path)
      echo -n "${REGISTRY_SERVER}/${REGISTRY_NAMESPACE}/${REGISTRY_REPOSITORY}:${REGISTRY_TAG}">$(results.image-url.path)

      if [[ -z "$(params.app-namespace)" ]]; then
        # Assume current namespace
        echo -n "${NAMESPACE}">$(results.app-namespace.path)
      fi

      if [[ -z "$(params.app-name)" ]]; then
        # Assume image repository/name
        echo -n "${REGISTRY_REPOSITORY}">$(results.app-name.path)
      fi


      if [[ -n "$(params.image-release)" ]]; then
        REGISTRY_RELEASE_SERVER_VALUE=$(echo "$(params.image-release)" | awk -F / '{print $1}')
        if [[ -n "${REGISTRY_RELEASE_SERVER_VALUE}" ]]; then
          REGISTRY_RELEASE_SERVER="${REGISTRY_RELEASE_SERVER_VALUE}"
        fi

        REGISTRY_RELEASE_NAMESPACE_VALUE=$(echo "$(params.image-release)" | awk -F / '{print $2}')
        if [[ -n "${REGISTRY_RELEASE_NAMESPACE_VALUE}" ]]; then
          if [[ "${REGISTRY_RELEASE_NAMESPACE_VALUE}" = '$NAMESPACE' ]]; then
            REGISTRY_RELEASE_NAMESPACE=${NAMESPACE}
          else
            REGISTRY_RELEASE_NAMESPACE="${REGISTRY_RELEASE_NAMESPACE_VALUE}"
          fi
        elif [[ "${REGISTRY_RELEASE_SERVER}" = "image-registry.openshift-image-registry.svc:5000" ]]; then
          REGISTRY_RELEASE_NAMESPACE=${NAMESPACE}
        fi
      fi
      if [[ -z "${REGISTRY_RELEASE_NAMESPACE}" ]]; then
        # Assume current k8s namespace
        REGISTRY_RELEASE_NAMESPACE="${NAMESPACE}"
      fi
      if [[ -z "${REGISTRY_RELEASE_SERVER}" ]]; then
        # Assume internal registry
        REGISTRY_RELEASE_SERVER="image-registry.openshift-image-registry.svc:5000"
      fi
      REGISTRY_RELEASE_URL="${REGISTRY_RELEASE_SERVER}/${REGISTRY_RELEASE_NAMESPACE}/${REGISTRY_REPOSITORY}"
      echo -n "${REGISTRY_RELEASE_URL}">$(results.image-release.path)

      PERFORM_SCAN="$(params.scan-image)"
      PERFORM_SCAN_IBM="false"
      PERFORM_SCAN_TRIVY="false"
      if [[ "${PERFORM_SCAN}" == "true" ]]; then
        echo "User selected to perform container image scanning"
        if echo "$REGISTRY_RELEASE_URL" | grep 'icr.io'; then
          echo "Using IBM Container registry, enabling scanning using VA"
          PERFORM_SCAN_IBM="true"
        else
          echo "Not using IBM Container registry, enabling scanning using trivy"
          PERFORM_SCAN_TRIVY="true"
        fi
      fi

      echo -n "${PERFORM_SCAN}">$(results.scan-image.path)
      echo -n "${PERFORM_SCAN_TRIVY}">$(results.scan-trivy.path)
      echo -n "${PERFORM_SCAN_IBM}">$(results.scan-ibm.path)

      if [[ -z "$(params.ace-project)" ]]; then
        # Retrieve name of ACE Toolkit project
        ACE_PROJECT=$(ls workspace || true)
        echo -n "${ACE_PROJECT}">$(results.ace-project.path)
      fi

      PERFORM_LINT="$(params.lint-dockerfile)"
      echo -n "${PERFORM_LINT}">$(results.dockerfile-lint.path)

      for f in /tekton/results/*; do echo "results.$(basename $f)=$(cat $f)"; done
  volumes:
  - emptyDir: {}
    name: source

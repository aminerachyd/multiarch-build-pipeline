apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    app.openshift.io/description: Runs an image scan with Trivy or IBM VA and fails
      the build if issues are found.
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    description: Runs an image scan with Trivy or IBM VA and fails the build if issues
      are found.
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"tekton.dev/v1beta1","kind":"Task","metadata":{"annotations":{"app.openshift.io/description":"Runs an image scan with Trivy or IBM VA and fails the build if issues are found.","app.openshift.io/vcs-ref":"master","app.openshift.io/vcs-uri":"https://github.com/IBM/ibm-garage-tekton-tasks","description":"Runs an image scan with Trivy or IBM VA and fails the build if issues are found."},"labels":{"version":"2.7.7"},"name":"ibm-img-scan-v2-7-7","namespace":"tools"},"spec":{"params":[{"default":"","description":"URL of git repo, if provided it allows .trivyignore to be used from project source when running scan","name":"GIT_URL","type":"string"},{"default":"master","name":"GIT_REVISION","type":"string"},{"default":"/source","name":"source-dir","type":"string"},{"description":"The location of image to scan on IBM Container Registry \u003cserver\u003e/\u003cnamespace\u003e/\u003crepository\u003e:\u003ctag\u003e","name":"image-url"},{"default":"false","description":"Flag indicating that a scan should be performed with Trivy","name":"scan-trivy"},{"default":"true","description":"Flag indicating that Trivy scans should ignore unfixed vulnerabilities","name":"trivy-ignoreUnfixed"},{"default":"false","description":"Flag indicating that a scan should be performed with IBM VA","name":"scan-ibm"},{"default":"quay.io/containers/skopeo:v1.1.0","name":"SKOPEO_IMAGE"},{"default":"false","name":"IMAGE_FROM_TLS_VERIFY"},{"default":"quay.io/ibmgaragecloud/aquasec-trivy","name":"TRIVY_IMAGE"},{"default":"quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4","name":"tools-image"}],"stepTemplate":{"name":"","resources":{},"volumeMounts":[{"mountPath":"$(params.source-dir)","name":"source"}]},"steps":[{"env":[{"name":"GIT_PASSWORD","valueFrom":{"secretKeyRef":{"key":"password","name":"git-credentials","optional":true}}},{"name":"GIT_USERNAME","valueFrom":{"secretKeyRef":{"key":"username","name":"git-credentials","optional":true}}}],"image":"quay.io/ibmgaragecloud/alpine-git","name":"git-clone","resources":{},"script":"set +x\n\nif [ -z $(params.GIT_URL) ]; then\n    echo \"No git URL provided, skipping clone\"\n    exit 0\nfi\n\nif [[ -n \"${GIT_USERNAME}\" ]] \u0026\u0026 [[ -n \"${GIT_PASSWORD}\" ]]; then\n    git clone \"$(echo $(params.GIT_URL) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.GIT_URL) | awk -F '://' '{print $2}')\" $(params.source-dir)\nelse\n    set -x\n    git clone $(params.GIT_URL) $(params.source-dir)\nfi\nset -x\ncd $(params.source-dir)\ngit checkout $(params.GIT_REVISION)\n"},{"env":[{"name":"REGISTRY_USER","valueFrom":{"secretKeyRef":{"key":"REGISTRY_USER","name":"registry-access","optional":true}}},{"name":"REGISTRY_PASSWORD","valueFrom":{"secretKeyRef":{"key":"REGISTRY_PASSWORD","name":"registry-access","optional":true}}}],"image":"$(params.SKOPEO_IMAGE)","name":"trivy-pull","script":"set -ex\nPERFORM_SCAN=\"$(params.scan-trivy)\"\nif [[ \"${PERFORM_SCAN}\" == \"false\" ]] || [[ -z \"${PERFORM_SCAN}\" ]]; then\n  echo \"User selected to skip scanning. Skipping Trivy scan.\"\n  exit 0\nfi\nIMAGE_FROM=$(params.image-url)\nREGISTRY_SERVER_FROM=$(echo \"${IMAGE_FROM}\" | awk -F / '{print $1}')\nIMAGE_TO=\"oci:/var/oci/image\"\nIMAGE_FROM_TLS_VERIFY=$(params.IMAGE_FROM_TLS_VERIFY)\necho \"Tagging ${IMAGE_FROM} as ${IMAGE_TO}\"\nset +x\nif [[ -n \"${REGISTRY_USER}\" ]] \u0026\u0026 [[ -n \"${REGISTRY_PASSWORD}\" ]] \u0026\u0026 [[ \"${REGISTRY_SERVER_FROM}\" != \"image-registry.openshift-image-registry.svc:5000\" ]]; then\n  IMAGE_FROM_CREDS=\"--src-creds ${REGISTRY_USER}:${REGISTRY_PASSWORD}\"\nfi\nset -x\nif [ \"${REGISTRY_SERVER_FROM}\" =~ \":\" ]; then\n  IMAGE_FROM_TLS_VERIFY=\"false\"\nfi\necho \"skopeo copy --src-creds=xxxx --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} docker://${IMAGE_FROM} ${IMAGE_TO}\"\nset +x\nskopeo copy ${IMAGE_FROM_CREDS} --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} docker://${IMAGE_FROM} ${IMAGE_TO}\n","securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/var/oci","name":"oci-image"}],"workingDir":"$(params.source-dir)"},{"image":"$(params.TRIVY_IMAGE)","name":"trivy-scan","script":"set -ex\nPERFORM_SCAN=\"$(params.scan-trivy)\"\nif [[ \"${PERFORM_SCAN}\" == \"false\" ]] || [[ -z \"${PERFORM_SCAN}\" ]]; then\n  echo \"User selected to skip scanning. Skipping Trivy scan.\"\n  exit 0\nfi\nPATH_TO_IMAGE=\"/var/oci/image\"\necho -e \"Trivy Security Scan image in registry\"\ntrivy image --exit-code 0 --input ${PATH_TO_IMAGE}\nTRIVY_IGNORE_UNFIXED=\"$(params.trivy-ignoreUnfixed)\" trivy image --exit-code 1 --severity CRITICAL --input ${PATH_TO_IMAGE}\nmy_exit_code=$?\necho \"Scan exit code :--- $my_exit_code\"\nif [ ${my_exit_code} == 1 ]; then\n    echo \"Trivy scanning completed. CRITICAL Vulnerabilities found.\"\n    exit 1\nelse\n  echo \"Trivy scanning completed. CRITICAL vulnerabilities not found.\"\nfi\n","volumeMounts":[{"mountPath":"/var/oci","name":"oci-image"}],"workingDir":"$(params.source-dir)"},{"env":[{"name":"HOME","value":"/home/devops"},{"name":"IBM_CLOUD_APIKEY","valueFrom":{"secretKeyRef":{"key":"APIKEY","name":"ibmcloud-apikey","optional":true}}},{"name":"IBM_CLOUD_REGION","valueFrom":{"configMapKeyRef":{"key":"REGION","name":"ibmcloud-config","optional":true}}}],"image":"$(params.tools-image)","name":"ibm-scan","script":"#!/usr/bin/env bash\nset -ex\nPERFORM_SCAN=\"$(params.scan-ibm)\"\nif [[ \"${PERFORM_SCAN}\" == \"false\" ]] || [[ -z \"${PERFORM_SCAN}\" ]]; then\n  echo \"User selected to skip scanning. Skipping Vulnerability Advisor validation.\"\n  exit 0\nfi\n\nIMAGE_URL=$(params.image-url)\nREGISTRY_SERVER=$(echo $(params.image-url) | awk -F / '{print $1}')\n\n\n\nif [[ ! \"${REGISTRY_SERVER}\" =~ icr.io ]]; then\n  echo \"The image is not stored in the IBM Cloud Image Registry. Skipping Vulnerability Advisor validation\"\n  exit 0\nfi\n\n\necho -e \"VA Security Scan image in registry\"\n\necho \"Registry URL: ${REGISTRY_SERVER}\"\n\nset +x\nibmcloud login --apikey ${IBM_CLOUD_APIKEY} -r ${IBM_CLOUD_REGION}\nibmcloud target -r ${IBM_CLOUD_REGION}\nset -x\nibmcloud cr namespace-list\n\necho \"Getting the VA status of ${IMAGE_URL}\"\n\nset +e\nibmcloud cr va ${IMAGE_URL} --output json | grep -i \"Try again later\"\nretry=$?\nwhile [ $retry -eq 0 ]; do\n  sleep 30\n  echo \"Trying again to see if scan is done\"\n  ibmcloud cr va ${IMAGE_URL} --output json | grep -i \"Try again later\"\n  retry=$?\ndone\nset -e\nibmcloud cr va ${IMAGE_URL} --output json\necho \"Saving results to va-result.json\"\nibmcloud cr va ${IMAGE_URL} --output json \u003e va-result.json\nVA_STATUS=$(cat va-result.json | jq -r '.[].status')\n\necho \"VA scan status: ${VA_STATUS}\"\n\nif [[ \"${VA_STATUS}\" == \"OK\" ]]; then\n  echo \"VA - No Issues in the image\"\n  exit 0\nelif [[ $(cat va-result.json | jq -r '.[].vulnerabilities | length') -gt 0 ]]; then\n  echo \"VA Failure: $(cat va-result.json | jq -r '.[].vulnerabilities | length') vulnerabilities found in the image\"\n  cat va-result.json | jq -r '.[].vulnerabilities'\n  exit 1\nelif [[ $(cat va-result.json | jq -r '.[].configuration_issues | length') -gt 0 ]]; then\n  echo \"VA Warning - $(cat va-result.json | jq -r '.[].configuration_issues | length') configuration issues found in the image\"\n  cat va-result.json | jq -r '.[].configuration_issues'\n  exit 0\nelse\n  echo \"VA Warning: non-OK status from Vulnerability Advisor ${VA_STATUS}\"\n  cat va-result.json | jq -r '.[]'\nfi\n"}],"volumes":[{"emptyDir":{},"name":"oci-image"},{"emptyDir":{},"name":"source"}]}}
  creationTimestamp: "2022-04-26T09:49:11Z"
  generation: 1
  labels:
    version: 2.7.7
  name: ibm-img-scan-v2-7-7
  resourceVersion: "137872708"
  uid: b67fb90c-77f9-488f-9b8f-23ed7e1cfc65
spec:
  params:
  - default: ""
    description: URL of git repo, if provided it allows .trivyignore to be used from
      project source when running scan
    name: GIT_URL
    type: string
  - default: master
    name: GIT_REVISION
    type: string
  - default: /source
    name: source-dir
    type: string
  - description: The location of image to scan on IBM Container Registry <server>/<namespace>/<repository>:<tag>
    name: image-url
    type: string
  - default: "false"
    description: Flag indicating that a scan should be performed with Trivy
    name: scan-trivy
    type: string
  - default: "true"
    description: Flag indicating that Trivy scans should ignore unfixed vulnerabilities
    name: trivy-ignoreUnfixed
    type: string
  - default: "false"
    description: Flag indicating that a scan should be performed with IBM VA
    name: scan-ibm
    type: string
  - default: quay.io/containers/skopeo:v1.1.0
    name: SKOPEO_IMAGE
    type: string
  - default: "false"
    name: IMAGE_FROM_TLS_VERIFY
    type: string
  - default: quay.io/ibmgaragecloud/aquasec-trivy
    name: TRIVY_IMAGE
    type: string
  - default: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
    name: tools-image
    type: string
  stepTemplate:
    name: ""
    resources: {}
    volumeMounts:
    - mountPath: $(params.source-dir)
      name: source
  steps:
  - env:
    - name: GIT_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: git-credentials
          optional: true
    - name: GIT_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: git-credentials
          optional: true
    image: quay.io/ibmgaragecloud/alpine-git
    name: git-clone
    resources: {}
    script: |
      set +x

      if [ -z $(params.GIT_URL) ]; then
          echo "No git URL provided, skipping clone"
          exit 0
      fi

      if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
          git clone "$(echo $(params.GIT_URL) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.GIT_URL) | awk -F '://' '{print $2}')" $(params.source-dir)
      else
          set -x
          git clone $(params.GIT_URL) $(params.source-dir)
      fi
      set -x
      cd $(params.source-dir)
      git checkout $(params.GIT_REVISION)
  - env:
    - name: REGISTRY_USER
      valueFrom:
        secretKeyRef:
          key: REGISTRY_USER
          name: registry-access
          optional: true
    - name: REGISTRY_PASSWORD
      valueFrom:
        secretKeyRef:
          key: REGISTRY_PASSWORD
          name: registry-access
          optional: true
    image: $(params.SKOPEO_IMAGE)
    name: trivy-pull
    resources: {}
    script: |
      set -ex
      PERFORM_SCAN="$(params.scan-trivy)"
      if [[ "${PERFORM_SCAN}" == "false" ]] || [[ -z "${PERFORM_SCAN}" ]]; then
        echo "User selected to skip scanning. Skipping Trivy scan."
        exit 0
      fi
      IMAGE_FROM=$(params.image-url)
      REGISTRY_SERVER_FROM=$(echo "${IMAGE_FROM}" | awk -F / '{print $1}')
      IMAGE_TO="oci:/var/oci/image"
      IMAGE_FROM_TLS_VERIFY=$(params.IMAGE_FROM_TLS_VERIFY)
      echo "Tagging ${IMAGE_FROM} as ${IMAGE_TO}"
      set +x
      if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]] && [[ "${REGISTRY_SERVER_FROM}" != "image-registry.openshift-image-registry.svc:5000" ]]; then
        IMAGE_FROM_CREDS="--src-creds ${REGISTRY_USER}:${REGISTRY_PASSWORD}"
      fi
      set -x
      if [ "${REGISTRY_SERVER_FROM}" =~ ":" ]; then
        IMAGE_FROM_TLS_VERIFY="false"
      fi
      echo "skopeo copy --src-creds=xxxx --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} docker://${IMAGE_FROM} ${IMAGE_TO}"
      set +x
      skopeo copy ${IMAGE_FROM_CREDS} --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} docker://${IMAGE_FROM} ${IMAGE_TO}
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/oci
      name: oci-image
    workingDir: $(params.source-dir)
  - image: $(params.TRIVY_IMAGE)
    name: trivy-scan
    resources: {}
    script: |
      set -ex
      PERFORM_SCAN="$(params.scan-trivy)"
      if [[ "${PERFORM_SCAN}" == "false" ]] || [[ -z "${PERFORM_SCAN}" ]]; then
        echo "User selected to skip scanning. Skipping Trivy scan."
        exit 0
      fi
      PATH_TO_IMAGE="/var/oci/image"
      echo -e "Trivy Security Scan image in registry"
      trivy image --exit-code 0 --input ${PATH_TO_IMAGE}
      TRIVY_IGNORE_UNFIXED="$(params.trivy-ignoreUnfixed)" trivy image --exit-code 1 --severity CRITICAL --input ${PATH_TO_IMAGE}
      my_exit_code=$?
      echo "Scan exit code :--- $my_exit_code"
      if [ ${my_exit_code} == 1 ]; then
          echo "Trivy scanning completed. CRITICAL Vulnerabilities found."
          exit 1
      else
        echo "Trivy scanning completed. CRITICAL vulnerabilities not found."
      fi
    volumeMounts:
    - mountPath: /var/oci
      name: oci-image
    workingDir: $(params.source-dir)
  - env:
    - name: HOME
      value: /home/devops
    - name: IBM_CLOUD_APIKEY
      valueFrom:
        secretKeyRef:
          key: APIKEY
          name: ibmcloud-apikey
          optional: true
    - name: IBM_CLOUD_REGION
      valueFrom:
        configMapKeyRef:
          key: REGION
          name: ibmcloud-config
          optional: true
    image: $(params.tools-image)
    name: ibm-scan
    resources: {}
    script: |
      #!/usr/bin/env bash
      set -ex
      PERFORM_SCAN="$(params.scan-ibm)"
      if [[ "${PERFORM_SCAN}" == "false" ]] || [[ -z "${PERFORM_SCAN}" ]]; then
        echo "User selected to skip scanning. Skipping Vulnerability Advisor validation."
        exit 0
      fi

      IMAGE_URL=$(params.image-url)
      REGISTRY_SERVER=$(echo $(params.image-url) | awk -F / '{print $1}')



      if [[ ! "${REGISTRY_SERVER}" =~ icr.io ]]; then
        echo "The image is not stored in the IBM Cloud Image Registry. Skipping Vulnerability Advisor validation"
        exit 0
      fi


      echo -e "VA Security Scan image in registry"

      echo "Registry URL: ${REGISTRY_SERVER}"

      set +x
      ibmcloud login --apikey ${IBM_CLOUD_APIKEY} -r ${IBM_CLOUD_REGION}
      ibmcloud target -r ${IBM_CLOUD_REGION}
      set -x
      ibmcloud cr namespace-list

      echo "Getting the VA status of ${IMAGE_URL}"

      set +e
      ibmcloud cr va ${IMAGE_URL} --output json | grep -i "Try again later"
      retry=$?
      while [ $retry -eq 0 ]; do
        sleep 30
        echo "Trying again to see if scan is done"
        ibmcloud cr va ${IMAGE_URL} --output json | grep -i "Try again later"
        retry=$?
      done
      set -e
      ibmcloud cr va ${IMAGE_URL} --output json
      echo "Saving results to va-result.json"
      ibmcloud cr va ${IMAGE_URL} --output json > va-result.json
      VA_STATUS=$(cat va-result.json | jq -r '.[].status')

      echo "VA scan status: ${VA_STATUS}"

      if [[ "${VA_STATUS}" == "OK" ]]; then
        echo "VA - No Issues in the image"
        exit 0
      elif [[ $(cat va-result.json | jq -r '.[].vulnerabilities | length') -gt 0 ]]; then
        echo "VA Failure: $(cat va-result.json | jq -r '.[].vulnerabilities | length') vulnerabilities found in the image"
        cat va-result.json | jq -r '.[].vulnerabilities'
        exit 1
      elif [[ $(cat va-result.json | jq -r '.[].configuration_issues | length') -gt 0 ]]; then
        echo "VA Warning - $(cat va-result.json | jq -r '.[].configuration_issues | length') configuration issues found in the image"
        cat va-result.json | jq -r '.[].configuration_issues'
        exit 0
      else
        echo "VA Warning: non-OK status from Vulnerability Advisor ${VA_STATUS}"
        cat va-result.json | jq -r '.[]'
      fi
  volumes:
  - emptyDir: {}
    name: oci-image
  - emptyDir: {}
    name: source

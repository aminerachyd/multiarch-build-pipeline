apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    app.openshift.io/description:
      Publishes the helm chart configuration to the provided
      gitops repo to trigger downstream deployments
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    description:
      Publishes the helm chart configuration to the provided gitops repo
      to trigger downstream deployments
  generation: 1
  labels:
    version: 2.7.7
  name: ibm-gitops-v2-7-7
spec:
  params:
    - default: ""
      name: app-name
      type: string
    - default: ""
      name: version
      type: string
    - default: /source
      name: source-dir
      type: string
    - default: ""
      name: subdir
      type: string
    - default: ""
      name: parentdir
      type: string
    - default: requirements.yaml
      name: yaml
      type: string
    - default: ""
      name: helm-url
      type: string
    - default: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
      name: tools-image
      type: string
  stepTemplate:
    name: ""
    resources: {}
    volumeMounts:
      - mountPath: $(params.source-dir)
        name: source
  steps:
    - env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOME
          value: /home/devops
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: git-credentials
              optional: true
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: git-credentials
              optional: true
        - name: GIT_USERNAME_CD
          valueFrom:
            secretKeyRef:
              key: username
              name: gitops-cd-secret
              optional: true
        - name: GIT_PASSWORD_CD
          valueFrom:
            secretKeyRef:
              key: password
              name: gitops-cd-secret
              optional: true
        - name: GIT_PARENT_DIR
          valueFrom:
            configMapKeyRef:
              key: parentdir
              name: gitops-repo
              optional: true
        - name: GIT_PARENT_DIR_SERVICES
          valueFrom:
            configMapKeyRef:
              key: parentdir-services
              name: gitops-repo
              optional: true
        - name: GIT_PROTOCOL
          valueFrom:
            configMapKeyRef:
              key: protocol
              name: gitops-repo
              optional: true
        - name: GIT_HOST
          valueFrom:
            configMapKeyRef:
              key: host
              name: gitops-repo
              optional: true
        - name: GIT_ORG
          valueFrom:
            configMapKeyRef:
              key: org
              name: gitops-repo
              optional: true
        - name: GIT_REPO
          valueFrom:
            configMapKeyRef:
              key: repo
              name: gitops-repo
              optional: true
        - name: GIT_BRANCH
          valueFrom:
            configMapKeyRef:
              key: branch
              name: gitops-repo
              optional: true
      image: $(params.tools-image)
      name: gitops
      resources: {}
      script: |
        #!/usr/bin/env bash
        set -ex

        APP_NAME="$(params.app-name)"
        SUBDIR="$(params.subdir)"
        if [[ -z "${SUBDIR}" ]]; then
          SUBDIR="${APP_NAME}"
        fi
        if [[ -n "$(params.parentdir)" ]]; then
          PARENT_DIR="$(params.parentdir)"
        elif [[ -n "${GIT_PARENT_DIR_SERVICES}" ]] && [[ "${GIT_PARENT_DIR_SERVICES}" = "bash -c"* ]]; then
          PARENT_DIR=$(eval $GIT_PARENT_DIR_SERVICES | tail -n 1)
        elif [[ -n "${GIT_PARENT_DIR_SERVICES}" ]]; then
          PARENT_DIR="${GIT_PARENT_DIR_SERVICES}"
        elif [[ -n "${GIT_PARENT_DIR}" ]] && [[ "${GIT_PARENT_DIR}" = "bash -c"* ]]; then
          PARENT_DIR=$(eval $GIT_PARENT_DIR | tail -n 1)
        elif [[ -n "${GIT_PARENT_DIR}" ]]; then
          PARENT_DIR="${GIT_PARENT_DIR}"
        else
          PARENT_DIR="."
        fi
        SUBDIR="${PARENT_DIR}/${SUBDIR}"

        PROTOCOL="${GIT_PROTOCOL}"
        if [[ -z "${PROTOCOL}" ]]; then
          PROTOCOL="https"
        fi

        YAML_FILE="$(params.yaml)"
        VERSION="$(params.version)"
        HELM_URL="$(params.helm-url)"

        if [[ -z "${GIT_HOST}" ]] || [[ -z "${GIT_ORG}" ]] || [[ -z "${GIT_REPO}" ]]; then
            echo "GitOps repo has not been configured with confimap gitops-repo. Skipping trigger step"
            exit 0
        fi

        set +x
        if [[ -n "${GIT_USERNAME_CD}" ]]; then
          GIT_AUTH_USER="${GIT_USERNAME_CD}"
          GIT_AUTH_PWD="${GIT_PASSWORD_CD}"
        elif [[ -n "${GIT_USERNAME}" ]]; then
          GIT_AUTH_USER="${GIT_USERNAME}"
          GIT_AUTH_PWD="${GIT_PASSWORD}"
        else
          echo "Credentials for GitOps repo not set in secret gitops-cd-secret or git-credentials"
          exit 1
        fi
        set -x

        BRANCH_CMD=""
        if [[ -n "${GIT_BRANCH}" ]]; then
          BRANCH_CMD="-b ${GIT_BRANCH}"
        fi

        git config --global user.email "gitops@cloudnativetoolkit.dev"
        git config --global user.name "Cloud Native Toolkit Pipeline"
        echo "git clone ${BRANCH_CMD} ${PROTOCOL}://${GIT_AUTH_USER}:xxxx@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"
        set +x
        GIT_URL="${PROTOCOL}://${GIT_AUTH_USER}:${GIT_AUTH_PWD}@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"
        git clone ${BRANCH_CMD} ${GIT_URL} gitops_cd
        set -x
        cd gitops_cd


        if [[ -f "${SUBDIR}/${YAML_FILE}" ]]; then
          echo "Requirements before update"
          cat "${SUBDIR}/${YAML_FILE}"

          yq r "${SUBDIR}/${YAML_FILE}" -j | \
            jq --arg APP_NAME "${APP_NAME}" --arg VERSION "${VERSION}" --arg REPO "${HELM_URL}" '.dependencies |= map((select(.name == $APP_NAME) | .version = $VERSION | .repository = $REPO) // .)' | \
            yq r --prettyPrint - > "${SUBDIR}/${YAML_FILE}.new"

          rm "${SUBDIR}/${YAML_FILE}"
          mv "${SUBDIR}/${YAML_FILE}.new" "${SUBDIR}/${YAML_FILE}"

          echo "Requirements after update"
          cat "${SUBDIR}/${YAML_FILE}"

        elif [[ -n "${HELM_URL}" ]]; then
          echo "Creating first time chart using ${SUBDIR}"
          # create directory
          mkdir -p "${SUBDIR}"

          # WARNING: Do not indent the cat commands below

        cat <<EOF >"${SUBDIR}/Chart.yaml"
        apiVersion: v2
        version: 0.1.0
        name: ${APP_NAME}
        description: Chart to configure ArgoCD with the ${APP_NAME} project and its applications
        EOF

        cat <<EOF >"${SUBDIR}/${YAML_FILE}"
        dependencies:
          - name: ${APP_NAME}
            version: ${VERSION}
            repository: >-
              ${HELM_URL}
        EOF

        cat <<EOF >"${SUBDIR}/values.yaml"
        global: {}
        ${APP_NAME}:
          replicaCount: 1
        EOF


        else
          echo "GitOps repo configured but unable to update application config"
          exit 1
        fi

        if [[ $(git status -s | wc -l) -eq 0 ]]; then
          echo "No changes"
          exit 0
        fi

        git add "${SUBDIR}/"
        git commit -m "Updates ${APP_NAME} to ${VERSION}"
        git push -v
      workingDir: $(params.source-dir)
  volumes:
    - emptyDir: {}
      name: source
